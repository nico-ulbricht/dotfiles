#!/bin/bash

# Expose local port to the web
function exp() {
	ssh -R "80:localhost:$@" "serveo.net"
}

# Kills a process based on the exposed port
function kp() {
	kill `lsof -i :$@ -t`
}

# Create a new directory and enter it
function mkd() {
	mkdir -p $@ && cd $@
}

# Cleans GCR image before a given date
# Usage: cleanGcr gcr.io/my-project/my-registry 2018-01-01
# Taken from https://gist.github.com/ahmetb/7ce6d741bd5baa194a3fac6b1fec8bb7
function cleanGcr() {
    local C=0
    IMAGE="${1}"
    DATE="${2}"
    for digest in $(gcloud container images list-tags ${IMAGE} --limit=999999 --sort-by=TIMESTAMP \
    --filter="NOT tags:latest AND timestamp.datetime < '${DATE}'" --format='get(digest)'); do
    (
        set -x
        gcloud container images delete -q --force-delete-tags "${IMAGE}@${digest}"
    )
    let C=C+1
    done
    echo "Deleted ${C} images in ${IMAGE}." >&2
}

function dkl() {
    docker kill $(docker ps -ql)
}

function kdp() {
    kubectl get pods | grep Evicted | awk '{print $1}' | xargs kubectl delete pod
}

function gkp() {
    kubectl get pods | grep $@ | awk '{print $1}' | xargs kubectl delete pods
}

function gkj() {
    kubectl get jobs | grep $@ | awk '{print $1}' | xargs kubectl delete jobs
}

function ci() {
    open https://circleci.com/gh/freight-hub/workflows/$(basename $PWD) 
}

function gh() {
    open https://github.com.com/freight-hub/$(basename $PWD) 
}

function wi() {
    open https://en.wikipedia.org/wiki/$1
}

function hm() {
    open https://dashboard.heroku.com/apps/$1/metrics
}

function hr() {
    open https://dashboard.heroku.com/apps/$1/resources
}

function hs() {
    open https://dashboard.heroku.com/apps/$1/settings
}